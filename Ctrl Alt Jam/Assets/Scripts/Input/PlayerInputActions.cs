//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""3ce99fb3-c841-46cd-860d-30e6d82ab446"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4d33e9f0-fda2-4ccb-87c4-7898de0212a5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard WASD"",
                    ""id"": ""0948409c-c4e4-4f12-b32b-83512a3ad19a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0b3e3064-36b4-4b62-aea4-e886aa5f3aa8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""433b982d-0648-43d8-a59f-9b1e89e1983f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4c348ef4-a4f9-4a17-8f7f-ca856562fca1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2fc0d53d-1768-48e3-963b-4113047d4a71"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard Arrows"",
                    ""id"": ""c30d6e7d-4df3-4f2d-b94a-7e545e800051"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""110e7ada-4125-4fd0-b297-c19cfb6528f9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b307f918-485a-4857-b79f-b0b4218ac105"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d372ba21-5905-4678-a703-22a43abf360d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""33447b63-e5e9-4ec5-a02a-a63c9a40e70b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""SkillMap"",
            ""id"": ""066f89b6-dac4-4e1d-b741-7c4873dcfa22"",
            ""actions"": [
                {
                    ""name"": ""LightUp"",
                    ""type"": ""Button"",
                    ""id"": ""dd662880-75a0-416a-8373-508000133442"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireBall"",
                    ""type"": ""Button"",
                    ""id"": ""3797bfa9-008e-48ae-a3f3-710487644926"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaySkill"",
                    ""type"": ""Button"",
                    ""id"": ""0130948a-3bc2-4370-8658-dd511e7073e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5c41b8a6-b8db-4e93-a9b0-23d6f5d335a9"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f215b5b-091f-40a9-96b9-b1bd1e4cd69c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81ed6cdb-c3bd-4c67-87d4-dcd0a8e4c1ce"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaySkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_Movement = m_PlayerMap.FindAction("Movement", throwIfNotFound: true);
        // SkillMap
        m_SkillMap = asset.FindActionMap("SkillMap", throwIfNotFound: true);
        m_SkillMap_LightUp = m_SkillMap.FindAction("LightUp", throwIfNotFound: true);
        m_SkillMap_FireBall = m_SkillMap.FindAction("FireBall", throwIfNotFound: true);
        m_SkillMap_PlaySkill = m_SkillMap.FindAction("PlaySkill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private List<IPlayerMapActions> m_PlayerMapActionsCallbackInterfaces = new List<IPlayerMapActions>();
    private readonly InputAction m_PlayerMap_Movement;
    public struct PlayerMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMap_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMapActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMapActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);

    // SkillMap
    private readonly InputActionMap m_SkillMap;
    private List<ISkillMapActions> m_SkillMapActionsCallbackInterfaces = new List<ISkillMapActions>();
    private readonly InputAction m_SkillMap_LightUp;
    private readonly InputAction m_SkillMap_FireBall;
    private readonly InputAction m_SkillMap_PlaySkill;
    public struct SkillMapActions
    {
        private @PlayerInputActions m_Wrapper;
        public SkillMapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LightUp => m_Wrapper.m_SkillMap_LightUp;
        public InputAction @FireBall => m_Wrapper.m_SkillMap_FireBall;
        public InputAction @PlaySkill => m_Wrapper.m_SkillMap_PlaySkill;
        public InputActionMap Get() { return m_Wrapper.m_SkillMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkillMapActions set) { return set.Get(); }
        public void AddCallbacks(ISkillMapActions instance)
        {
            if (instance == null || m_Wrapper.m_SkillMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SkillMapActionsCallbackInterfaces.Add(instance);
            @LightUp.started += instance.OnLightUp;
            @LightUp.performed += instance.OnLightUp;
            @LightUp.canceled += instance.OnLightUp;
            @FireBall.started += instance.OnFireBall;
            @FireBall.performed += instance.OnFireBall;
            @FireBall.canceled += instance.OnFireBall;
            @PlaySkill.started += instance.OnPlaySkill;
            @PlaySkill.performed += instance.OnPlaySkill;
            @PlaySkill.canceled += instance.OnPlaySkill;
        }

        private void UnregisterCallbacks(ISkillMapActions instance)
        {
            @LightUp.started -= instance.OnLightUp;
            @LightUp.performed -= instance.OnLightUp;
            @LightUp.canceled -= instance.OnLightUp;
            @FireBall.started -= instance.OnFireBall;
            @FireBall.performed -= instance.OnFireBall;
            @FireBall.canceled -= instance.OnFireBall;
            @PlaySkill.started -= instance.OnPlaySkill;
            @PlaySkill.performed -= instance.OnPlaySkill;
            @PlaySkill.canceled -= instance.OnPlaySkill;
        }

        public void RemoveCallbacks(ISkillMapActions instance)
        {
            if (m_Wrapper.m_SkillMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISkillMapActions instance)
        {
            foreach (var item in m_Wrapper.m_SkillMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SkillMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SkillMapActions @SkillMap => new SkillMapActions(this);
    public interface IPlayerMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface ISkillMapActions
    {
        void OnLightUp(InputAction.CallbackContext context);
        void OnFireBall(InputAction.CallbackContext context);
        void OnPlaySkill(InputAction.CallbackContext context);
    }
}
